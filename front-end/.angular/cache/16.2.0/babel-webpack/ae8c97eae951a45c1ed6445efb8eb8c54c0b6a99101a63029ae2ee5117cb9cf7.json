{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http'; // Import HttpHeaders\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../notification.service\";\nimport * as i3 from \"@angular/common\";\nfunction NotificationComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 1)(2, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function NotificationComponent_div_0_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const notification_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.deleteNotification(notification_r1._id, notification_r1.postId));\n    });\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const notification_r1 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(notification_r1.message);\n  }\n}\nexport class NotificationComponent {\n  constructor(router, notificationService) {\n    this.router = router;\n    this.notificationService = notificationService;\n    this.notifications = [];\n    this.jwtToken = '';\n  }\n  ngOnInit() {\n    this.jwtToken = localStorage.getItem;\n    this.fetchNotifications();\n  }\n  fetchNotifications() {\n    const headers = new HttpHeaders({\n      Authorization: `Bearer ${this.jwtToken}`\n    });\n    this.notificationService.getNotifications(headers).subscribe(notifications => {\n      this.notifications = notifications;\n    }, error => {\n      console.error('Error fetching notifications:', error);\n    });\n  }\n  deleteNotification(notificationId, postId) {\n    const headers = new HttpHeaders({\n      Authorization: `Bearer ${this.jwtToken}`\n    });\n    this.notificationService.deleteNotification(notificationId, headers).subscribe(() => {\n      this.router.navigate(['/post', postId]); // Adjust the route as needed\n      this.fetchNotifications(); // Fetch notifications again after deletion\n    }, error => {\n      console.error('Error deleting notification:', error);\n    });\n  }\n}\n_class = NotificationComponent;\n_class.ɵfac = function NotificationComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.NotificationService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-notification\"]],\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [1, \"notification\"], [3, \"click\"]],\n  template: function NotificationComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NotificationComponent_div_0_Template, 5, 1, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.notifications);\n    }\n  },\n  dependencies: [i3.NgForOf],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["HttpHeaders","i0","ɵɵelementStart","ɵɵlistener","NotificationComponent_div_0_Template_button_click_2_listener","restoredCtx","ɵɵrestoreView","_r3","notification_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","deleteNotification","_id","postId","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","message","NotificationComponent","constructor","router","notificationService","notifications","jwtToken","ngOnInit","localStorage","getItem","fetchNotifications","headers","Authorization","getNotifications","subscribe","error","console","notificationId","navigate","ɵɵdirectiveInject","i1","Router","i2","NotificationService","selectors","decls","vars","consts","template","NotificationComponent_Template","rf","ctx","ɵɵtemplate","NotificationComponent_div_0_Template","ɵɵproperty"],"sources":["C:\\Users\\HP\\Desktop\\cpp\\new\\distributed_system\\front-end\\src\\app\\notification\\notification.component.ts","C:\\Users\\HP\\Desktop\\cpp\\new\\distributed_system\\front-end\\src\\app\\notification\\notification.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpHeaders } from '@angular/common/http'; // Import HttpHeaders\nimport { NotificationService } from '../notification.service';\n\n@Component({\n  selector: 'app-notification',\n  templateUrl: './notification.component.html',\n  styleUrls: ['./notification.component.css'],\n})\nexport class NotificationComponent implements OnInit {\n  notifications: any[] = [];\n  private jwtToken: string = ''; \n  constructor(private router: Router, private notificationService: NotificationService) {}\n\n  ngOnInit(): void {\n    this.jwtToken=localStorage.getItem\n    this.fetchNotifications();\n  }\n\n  fetchNotifications() {\n    const headers = new HttpHeaders({\n      Authorization: `Bearer ${this.jwtToken}`\n    });\n\n    this.notificationService.getNotifications(headers).subscribe(\n      (notifications: any) => {\n        this.notifications = notifications;\n      },\n      (error: any) => {\n        console.error('Error fetching notifications:', error);\n      }\n    );\n  }\n\n  deleteNotification(notificationId: string, postId: string) {\n    const headers = new HttpHeaders({\n      Authorization: `Bearer ${this.jwtToken}`\n    });\n\n    this.notificationService.deleteNotification(notificationId, headers).subscribe(\n      () => {\n        this.router.navigate(['/post', postId]); // Adjust the route as needed\n        this.fetchNotifications(); // Fetch notifications again after deletion\n      },\n      (error: any) => {\n        console.error('Error deleting notification:', error);\n      }\n    );\n  }\n}\n","<div *ngFor=\"let notification of notifications\">\n    <div class=\"notification\">\n      <button (click)=\"deleteNotification(notification._id, notification.postId)\"><p>{{ notification.message }}</p></button>\n    </div>\n  </div>\n  "],"mappings":";AAEA,SAASA,WAAW,QAAQ,sBAAsB,CAAC,CAAC;;;;;;;;ICFpDC,EAAA,CAAAC,cAAA,UAAgD;IAElCD,EAAA,CAAAE,UAAA,mBAAAC,6DAAA;MAAA,MAAAC,WAAA,GAAAJ,EAAA,CAAAK,aAAA,CAAAC,GAAA;MAAA,MAAAC,eAAA,GAAAH,WAAA,CAAAI,SAAA;MAAA,MAAAC,MAAA,GAAAT,EAAA,CAAAU,aAAA;MAAA,OAASV,EAAA,CAAAW,WAAA,CAAAF,MAAA,CAAAG,kBAAA,CAAAL,eAAA,CAAAM,GAAA,EAAAN,eAAA,CAAAO,MAAA,CAAyD;IAAA,EAAC;IAACd,EAAA,CAAAC,cAAA,QAAG;IAAAD,EAAA,CAAAe,MAAA,GAA0B;IAAAf,EAAA,CAAAgB,YAAA,EAAI;;;;IAA9BhB,EAAA,CAAAiB,SAAA,GAA0B;IAA1BjB,EAAA,CAAAkB,iBAAA,CAAAX,eAAA,CAAAY,OAAA,CAA0B;;;ADQ/G,OAAM,MAAOC,qBAAqB;EAGhCC,YAAoBC,MAAc,EAAUC,mBAAwC;IAAhE,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,mBAAmB,GAAnBA,mBAAmB;IAF/D,KAAAC,aAAa,GAAU,EAAE;IACjB,KAAAC,QAAQ,GAAW,EAAE;EAC0D;EAEvFC,QAAQA,CAAA;IACN,IAAI,CAACD,QAAQ,GAACE,YAAY,CAACC,OAAO;IAClC,IAAI,CAACC,kBAAkB,EAAE;EAC3B;EAEAA,kBAAkBA,CAAA;IAChB,MAAMC,OAAO,GAAG,IAAI/B,WAAW,CAAC;MAC9BgC,aAAa,EAAE,UAAU,IAAI,CAACN,QAAQ;KACvC,CAAC;IAEF,IAAI,CAACF,mBAAmB,CAACS,gBAAgB,CAACF,OAAO,CAAC,CAACG,SAAS,CACzDT,aAAkB,IAAI;MACrB,IAAI,CAACA,aAAa,GAAGA,aAAa;IACpC,CAAC,EACAU,KAAU,IAAI;MACbC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD,CAAC,CACF;EACH;EAEAtB,kBAAkBA,CAACwB,cAAsB,EAAEtB,MAAc;IACvD,MAAMgB,OAAO,GAAG,IAAI/B,WAAW,CAAC;MAC9BgC,aAAa,EAAE,UAAU,IAAI,CAACN,QAAQ;KACvC,CAAC;IAEF,IAAI,CAACF,mBAAmB,CAACX,kBAAkB,CAACwB,cAAc,EAAEN,OAAO,CAAC,CAACG,SAAS,CAC5E,MAAK;MACH,IAAI,CAACX,MAAM,CAACe,QAAQ,CAAC,CAAC,OAAO,EAAEvB,MAAM,CAAC,CAAC,CAAC,CAAC;MACzC,IAAI,CAACe,kBAAkB,EAAE,CAAC,CAAC;IAC7B,CAAC,EACAK,KAAU,IAAI;MACbC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD,CAAC,CACF;EACH;;SAvCWd,qBAAqB;;mBAArBA,MAAqB,EAAApB,EAAA,CAAAsC,iBAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAxC,EAAA,CAAAsC,iBAAA,CAAAG,EAAA,CAAAC,mBAAA;AAAA;;QAArBtB,MAAqB;EAAAuB,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,+BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCVlCjD,EAAA,CAAAmD,UAAA,IAAAC,oCAAA,iBAIQ;;;MAJsBpD,EAAA,CAAAqD,UAAA,YAAAH,GAAA,CAAA1B,aAAA,CAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}